var mod = {
    checkForRequiredCreeps: () => {
        //    let requiredCreeps = [];
        let requiredCreeps = [];
        //    for each source{
        var son = 0;
        for (var roomName in Game.rooms) {
            son++;
            var room = Game.rooms[roomName];
            room.sources.forEach((source) => {
                //        if source has no miner {
                //        requiredCreeps.push(new miner
                let minerHasThisSource = data => { return data.creepType == "miner" && data.destiny == source.id };
                let existingMiner = _.find(Memory.population, minerHasThisSource);
                if (!existingMiner) {
                    var spawnRoomName = Room.bestSpawnRoomFor(source);
                    var setup = 'miner';
                    var parts = [WORK, WORK, WORK, WORK, WORK, CARRY, MOVE, MOVE];
                    //var cost = Creep.setup.bodyCosts(parts);
                    var name;
                    var destiny = source.id;
                    for (;name == null || Game.creeps[name]; son++) {
                        name = setup + '-' + son;
                    }
                    Game.rooms[spawnRoomName].spawnQueueHigh.push({
                        parts: parts,
                        name: name,
                        setup: setup,
                        destiny: destiny
                    });
                    console.log(destiny + ": " + spawnRoomName);
                }
                //      }
            });
            //    }
        }
        //    if room.haulers == 0 
        //      requiredCreeps.push(new miner);
        //    for each creep in requiredCreeps{
        //      let room = Room.bestSpawnRoom(task);
        //      room.queue.push(creep);
        //    }


        /*            let notDeterminated = source => {
                        let hasThisSource = data => { return data.determinatedTarget == source.id };
                        let existingBranding = _.find(Memory.population, hasThisSource);
                        return !existingBranding;
                    };
                    source = _.find(creep.room.sources, notDeterminated);
                    if( source ) {
                        creep.data.determinatedTarget = source.id;
                    }
                    */
        /*
            var isAddable = target => that.isAddableTarget(target, creep);
            return _.find(creep.room.constructionSites, isAddable);
            */
        /*
                        let guests = _.countBy(source.targetOf, 'creepType');
                        let count = guests[creep.data.creepType];
                        */

        /*
        var loop = spawn => {
                        if(spawn.room.my) spawn.loop();
                    }
                    _.forEach(Game.spawns, loop);
                    */
    }
};

module.exports = mod;